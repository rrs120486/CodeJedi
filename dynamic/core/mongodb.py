from pymongo import MongoClient
from bson.objectid import ObjectId
from genericmodel import GenericModel

class MongoDb :

	def __init__(self, dbName = None, host = None, port = None) :
		_host = getConf('host') if (host == None) else host
		_port = getConf('port') if (port == None) else port
		_dbName = getConf('db') if (dbName == None) else dbName
		connection = MongoClient(_host, _port)
		self._db = connection[_dbName]

	def insert(self, data, collection) :
		return self._db[collection].insert(data.asDict())
	
	def remove(self, pattern, collection) :
		self._db[collection].remove(pattern)

	def removeById(self, _id, collection) :
		self._db[collection].remove({"_id" :  ObjectId(_id)})
	
	def update(self, pattern, data, collection, option = 'set', _upsertStatus = False) :
		_data = data.asDict()
		if 'id' in _data :
			raise TypeError("id can not be changed. Try removing id from the data to be saved/updated")
		if 'id' in pattern :
			pattern['_id'] = ObjectId(pattern['id'])
			del pattern['id']
		self._db[collection].update(pattern, { '$' + option : _data}, upsert = _upsertStatus)
	
	def save(self, pattern, data, collection, option = 'set') :
		self.update(pattern, data, collection, option, True)

	def count (self, pattern, collection) :
		return self._db[collection].find(pattern).count()
	
	def find(self, pattern, collection) :
		resultSet = self._db[collection].find(pattern)
		return [self._processResult(document) for document in resultSet]
	
	def _processResult(self, result) :
		result['id'] = str(result['_id'])
		del result['_id']
		return GenericModel(result)
	
	def findById(self, _id, collection) :
		result = self._db[collection].find_one({"_id": ObjectId(_id)})
		if result is None: return result
		return self._processResult(result)

		"""
			init			: You need to pass host, port, dbname or get it from a configuration file.
			functions 		: insert, save, update, remove, removeById, find, findById 
			_id				: This is the id generated by mongo. 
							  Mongo will generate it and send it in the form of object.
							  	Ex: ObjectId("514f0ff09392ba51be07f494")
							  You need to pass the string part inside that object (514f0ff09392ba51be07f494).
							  	
			pattern 		: The search pattern should be of type dict.
								Ex : {'name' : 'shiva', 'inst' : 'MIT'}
									 {'id' : '514f0ff09392ba51be07f494'}
			data 			: data to be updated/ inserted/ saved. It should be of the form GenericModel.
					   			Ex : data = GenericModel( {'name':'Jeeva'} )
									You can not update the id. Mongodb forbids that.
									If you have an generic model object with id (say x). Do x.delId() and then pass it to update.
			collection	 	: It is the collection name (like table in sql) of the data.
			option 			: Default option is set. You can give 'inc', 'push', 'pop' ... It will apply this option to data.
			_upsertStatus	: Default is false. setting this to true will insert the document.
		"""

def getConf(conf) :
	if conf == "host" :
		return 'localhost'
	elif conf == 'port' :
		return 27017
	elif conf == 'db' :
		return 'pymongo'
	# mocking getconfig . Need to be implemented
	return None

#db = MongoBase("pymongo", "localhost", 27017)
#db.insert(GenericModel({"name":"jeeva"}), "user")
#print db.removeById("514dbe2a4443cf2a78438beb", "user")
#print [user for user in db.find({"name":"jeeva"}, "user")]
#db.update({'id': '514f0ff09392ba51be07f494'}, GenericModel({"age": 29, 'id': '514f0ff09392ba51be07f494'}), "user")
#db.save({"name":"arpit"},GenericModel({"age":23}), "user")
#print [user for user in db.find({"name":"jeeva"}, "user")]
#print 'Hello' == u'Hello'
#x = db.findById("514ea3664443cf4cd93b2897","user")
#print x.getName()
#y = db.find({"name":"arpit"}, 'user')
#print y[0].getName()
